import os
import base64
import subprocess
import sys
import requests
from dotenv import load_dotenv
from nacl import encoding, public

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.chdir(PROJECT_ROOT)
load_dotenv()

TOKEN = os.getenv("GITHUB_TOKEN")
USERNAME = os.getenv("GITHUB_USERNAME")
API_URL = "https://api.github.com"


# === –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø—É—à–µ–º ===
def run_pre_commit():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç pre-commit hooks –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    print("üßπ –ó–∞–ø—É—Å–∫ pre-commit –ø—Ä–æ–≤–µ—Ä–æ–∫...")
    result = subprocess.run(
        ["pre-commit", "run", "--all-files"],
        capture_output=True,
        text=True
    )
    print(result.stdout)
    if result.returncode != 0:
        print("‚ùå Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.")
        sys.exit(1)
    print("‚úÖ –í—Å–µ pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n")


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç pytest –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    result = subprocess.run(["pytest", "-q"], capture_output=True, text=True)
    print(result.stdout)
    if result.returncode != 0:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
        sys.exit(1)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!\n")


# === –†–∞–±–æ—Ç–∞ —Å GitHub API ===
def create_repo(repo_name, private=False):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub."""
    headers = {"Authorization": f"token {TOKEN}"}
    data = {"name": repo_name, "private": private, "auto_init": True}
    resp = requests.post(f"{API_URL}/user/repos", headers=headers, json=data)

    if resp.status_code == 201:
        print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        return resp.json()["full_name"]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {resp.text}")
        return None


def upload_file(repo, local_path, repo_path, message):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."""
    headers = {"Authorization": f"token {TOKEN}"}
    with open(local_path, "rb") as f:
        content = base64.b64encode(f.read()).decode("utf-8")

    url = f"{API_URL}/repos/{repo}/contents/{repo_path}"
    data = {"message": message, "content": content, "branch": "main"}
    resp = requests.put(url, headers=headers, json=data)

    if resp.status_code in (201, 200):
        print(f"üìÅ –§–∞–π–ª {repo_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    else:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {repo_path}: {resp.text}")


# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
EXCLUDE_PATTERNS = (
    ".mypy_cache",
    ".pytest_cache",
    "__pycache__",
    ".venv",
    ".idea",
    ".vscode",
    ".git/",
    "coverage.json",
    "screenshot.png"
)

def should_upload(path: str) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏."""
    return not any(ex in path for ex in EXCLUDE_PATTERNS)


def upload_project(repo_name, local_folder):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –∫—Ä–æ–º–µ –º—É—Å–æ—Ä–∞."""
    repo_fullname = f"{USERNAME}/{repo_name}"

    for root, dirs, files in os.walk(local_folder):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if should_upload(d)]

        for file in files:
            local_path = os.path.join(root, file)
            relative_path = os.path.relpath(local_path, local_folder)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            if not should_upload(relative_path) or file.endswith(".pyc") or file == ".env" or file == ".coverage":
                print(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª: {relative_path}")
                continue

            upload_file(repo_fullname, local_path, relative_path, f"Add {relative_path}")

    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")


def encrypt_secret(public_key: str, secret_value: str) -> str:
    """–®–∏—Ñ—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub API."""
    key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
    sealed_box = public.SealedBox(key)
    encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
    return base64.b64encode(encrypted).decode("utf-8")


def create_secret(repo_full_name, secret_name, secret_value):
    """–°–æ–∑–¥–∞—ë—Ç secret –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    headers = {"Authorization": f"token {TOKEN}"}

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    key_url = f"{API_URL}/repos/{repo_full_name}/actions/secrets/public-key"
    r = requests.get(key_url, headers=headers)
    if r.status_code != 200:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è {repo_full_name}: {r.text}")
        return
    key_data = r.json()
    print(f"üß© Creating secret {secret_name}: {secret_value!r}")

    # 2Ô∏è‚É£ –®–∏—Ñ—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç
    encrypted = encrypt_secret(key_data["key"], secret_value)

    # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç
    put_url = f"{API_URL}/repos/{repo_full_name}/actions/secrets/{secret_name}"
    data = {"encrypted_value": encrypted, "key_id": key_data["key_id"]}
    resp = requests.put(put_url, headers=headers, json=data)

    if resp.status_code in (201, 204):
        print(f"üîê Secret '{secret_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {repo_full_name}")
    else:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞ '{secret_name}': {resp.text}")


# === –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    repo_name = "flask-email-auto20"
    local_folder = PROJECT_ROOT

    # 1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ pre-commit –∏ pytest
    run_pre_commit()
    run_tests()

    # 2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –∑–∞–ª–∏–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    created = create_repo(repo_name)
    if created:
        upload_project(repo_name, local_folder)

        repo_fullname = f"{USERNAME}/{repo_name}"
        secrets_to_add = {
            "SMTP_SERVER": os.getenv("SMTP_SERVER"),
            "SMTP_PORT": os.getenv("SMTP_PORT"),
            "SENDER_EMAIL": os.getenv("SENDER_EMAIL"),
            "SENDER_PASSWORD": os.getenv("SENDER_PASSWORD"),
            "RECIPIENT_EMAIL": os.getenv("RECIPIENT_EMAIL")
        }

        for name, value in secrets_to_add.items():
            if value:
                create_secret(repo_fullname, name, value)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–∫—Ä–µ—Ç {name} ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤.\n")

    # 3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    print("üß™ –ó–∞–ø—É—Å–∫ pytest —Å –æ—Ç—á—ë—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...\n")
    result = subprocess.run(
        [
            "pytest",
            "--cov=app",
            "--cov-report=json",
            "--cov-report=term-missing",
            "--cov-fail-under=85"
        ],
        text=True,
        capture_output=True
    )
    print(result.stdout)

    if result.returncode == 0:
        print("‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ coverage.json")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏—è:")
        print(result.stderr)
        sys.exit(result.returncode)
